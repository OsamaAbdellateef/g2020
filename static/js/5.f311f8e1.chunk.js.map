{"version":3,"sources":["components/craft-preview/craft-preview.component.jsx"],"names":["CraftCard","lazy","firestore","firebase","CraftPreview","set_state","this","props","collection","get","then","console","log","usersRef","users","docs","map","doc","data","match","params","mC","nUsers","filter","user","signedAs","craft","currentURL","categoryId","className","myCrafts","worker","key","Math","random","fallback","height","width","imageCraftURL","displayName","address","phoneNumber","crafterID","userID","imagePersonalURL","React","Component","connect","workers","plumber","electrician","dispatch","stateName","value"],"mappings":"4RAUMA,G,MAAYC,gBAAK,kBAAM,kCAEvBC,EAAYC,IAASD,YAGrBE,E,gUAKSC,EAAaC,KAAKC,MAAlBF,U,SAScH,EAAUM,WAAW,SAASC,MAAMC,KAAKC,QAAQC,IAAI,iB,OAAtEC,E,OACAC,EAAQD,EAASE,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,UAEzCb,EAAU,aAAaC,KAAKC,MAAMY,MAAMC,QACxCf,EAAU,SAASS,GAEfO,EAAKf,KAAKC,MAAMe,OAAOC,QAAO,SAAAC,GAAI,MAAqB,UAAjBA,EAAKC,UAAwBD,EAAKE,OAAS,EAAKnB,MAAMoB,cAGhGtB,EAAU,WAAagB,G,iJAKJ,IAAD,OAClB,GAAGf,KAAKC,MAAMoB,aAAerB,KAAKC,MAAMY,MAAMC,OAAOQ,WAAY,CAC7DtB,KAAKC,MAAMF,UAAU,aAAeC,KAAKC,MAAMY,MAAMC,OAAOQ,YAC5D,IAAIP,EAAKf,KAAKC,MAAMe,OAAOC,QAAO,SAAAC,GAAI,MAAqB,UAAjBA,EAAKC,UAAwBD,EAAKE,OAAS,EAAKnB,MAAMY,MAAMC,OAAOQ,cAC7GtB,KAAKC,MAAMF,UAAU,WAAWgB,M,+BAMpC,OAEI,yBAAKQ,UAAU,2BAGX,yBAAKA,UAAU,OACdvB,KAAKC,MAAMuB,SAASd,KAAI,SAAAe,GAAM,OAC3B,kBAAC,WAAD,CAAUC,IAAKC,KAAKC,SAAUC,SAAU,kBAAC,IAAD,CAAUC,OAAQ,IAAKC,MAAO,OACjE,kBAACrC,EAAD,CACDgC,IAAKC,KAAKC,SACVI,cAAeP,EAAOO,cAAeC,YAAaR,EAAOQ,YAAaC,QAAST,EAAOS,QACtFC,YAAaV,EAAOU,YACpBC,UAAWX,EAAOY,OAClBC,iBAAkBb,EAAOa,iBAAkBlB,MAASK,EAAOL,kB,GAnDxDmB,IAAMC,WA6ElBC,uBAbS,SAAC,GAAD,IAAGvB,EAAH,EAAGA,KAAH,MAAe,CACnCwB,QAASxB,EAAKwB,QACdC,QAASzB,EAAKyB,QACdC,YAAa1B,EAAK0B,YAClBpB,SAASN,EAAKM,SACdH,WAAYH,EAAKG,WACjBL,OAAQE,EAAKF,WAGU,SAAC6B,GAAD,MAAe,CACtC9C,UAAW,SAAC+C,EAAWC,GAAZ,OAAsBF,EAAS9C,YAAU+C,EAAWC,QAGpDN,CAA6C3C","file":"static/js/5.f311f8e1.chunk.js","sourcesContent":["import React, {Suspense , lazy} from 'react';\r\nimport './craft-preview.style.scss';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { set_state } from '../../redux/user/user.actions';\r\nimport { connect } from 'react-redux';\r\n//import CraftCard from '../craft-card/craft-card.component';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport spinnerComp from '../spinner/spinner.component';\r\nimport SpinnerComp from '../spinner/spinner.component';\r\nconst CraftCard = lazy(() => import( '../craft-card/craft-card.component'));\r\n \r\nconst firestore = firebase.firestore();\r\n\r\n\r\nclass CraftPreview extends React.Component {\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        const {set_state} = this.props;\r\n        // const events = await firebase.firestore().collection('events')\r\n        // events.get().then((querySnapshot) => {\r\n        //     const tempDoc = []\r\n        //     querySnapshot.forEach((doc) => {\r\n        //        tempDoc.push({ id: doc.id, ...doc.data() })\r\n        //     })\r\n        //     console.log(tempDoc)\r\n        //  })\r\n        var usersRef = await firestore.collection(\"users\").get().then(console.log(\"hello there \"));\r\n        var users = usersRef.docs.map(doc => doc.data());\r\n  \r\n        set_state(\"currentURL\",this.props.match.params);\r\n        set_state(\"nUsers\",users)\r\n        \r\n        var mC = this.props.nUsers.filter(user => user.signedAs == \"worker\" && user.craft == this.props.currentURL);\r\n\r\n        \r\n        set_state(\"myCrafts\" , mC);\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if(this.props.currentURL !== this.props.match.params.categoryId) {\r\n            this.props.set_state(\"currentURL\" , this.props.match.params.categoryId )\r\n            var mC = this.props.nUsers.filter(user => user.signedAs == \"worker\" && user.craft == this.props.match.params.categoryId);\r\n            this.props.set_state(\"myCrafts\",mC)\r\n            \r\n        }\r\n    }\r\n    render() {\r\n \r\n        return (\r\n\r\n            <div className=\"craft-preview container\">\r\n              \r\n               \r\n                <div className=\"row\" >\r\n                {this.props.myCrafts.map(worker => (\r\n                    <Suspense key={Math.random()} fallback={<Skeleton height={100} width={100} />}>\r\n                         <CraftCard  \r\n                        key={Math.random()}\r\n                        imageCraftURL={worker.imageCraftURL} displayName={worker.displayName} address={worker.address} \r\n                        phoneNumber={worker.phoneNumber} \r\n                        crafterID={worker.userID}\r\n                        imagePersonalURL={worker.imagePersonalURL} craft = {worker.craft} />\r\n                    </Suspense>\r\n                ))                \r\n                }\r\n               \r\n                         \r\n            </div >\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = ({ user }) => ({\r\n    workers: user.workers,\r\n    plumber: user.plumber,\r\n    electrician: user.electrician,\r\n    myCrafts:user.myCrafts,\r\n    currentURL: user.currentURL,\r\n    nUsers: user.nUsers\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    set_state: (stateName, value) => dispatch(set_state(stateName, value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CraftPreview);"],"sourceRoot":""}